#include <SPI.h>
#include <RH_RF95.h>

// -------------------------
// Hardware Configuration
// -------------------------
#define RFM95_CS 10
#define RFM95_INT 2
#define RFM95_RST 9
#define LED_PIN 13

RH_RF95 rf95(RFM95_CS, RFM95_INT);

// -------------------------
// Protocol Configuration
// -------------------------
#define ACK_SIGNAL 0xAA
#define FLAG_SENSOR_MODE 0x01
const uint32_t allowedDevices[] = {0x11223344};

// -------------------------
// Packet Structures
// -------------------------
struct LoRaLightPacket {
  uint8_t version;
  uint32_t deviceId;
  uint32_t packetCounter;
  uint16_t weight1;
  uint16_t weight2;
  uint16_t distances[10];
  uint8_t flags;
  uint16_t crc;
};

struct CommandPacket {
  uint8_t commandId;
  uint8_t payload[4];
  uint16_t crc;
};

#define CMD_SET_SENSOR_MODE 0x01

// -------------------------
// Global State
// -------------------------
int requestedSensorMode = -1; // -1 = no command pending

// -------------------------
// Utility Functions
// -------------------------
void blinkLed(int times, int duration) {
  for(int i=0; i<times; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(duration);
    digitalWrite(LED_PIN, LOW);
    if(i < times-1) delay(duration);
  }
}

void printPacketHex(uint8_t* data, size_t length) {
  Serial.print("RX Hex: ");
  for(size_t i=0; i<length; i++) {
    if(data[i] < 0x10) Serial.print("0");
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.println();
}

uint16_t calculateCRC(const uint8_t *data, size_t length) {
  uint16_t crc = 0xFFFF;
  for(size_t i=0; i<length; ++i) {
    crc ^= data[i];
    for(uint8_t j=0; j<8; ++j) {
      if(crc & 1) crc = (crc >> 1) ^ 0xA001;
      else crc >>= 1;
    }
  }
  return crc;
}

// -------------------------
// Initialization
// -------------------------
void setup() {
  pinMode(LED_PIN, OUTPUT);
  Serial.begin(115200);
  while(!Serial);

  Serial.println("[STATUS] Starting LoRaLight Gateway");

  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);
  delay(100);
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);

  if(!rf95.init()) {
    Serial.println("[ERROR] LoRa init failed");
    while(1);
  }

  if(!rf95.setFrequency(868.0)) {
    Serial.println("[ERROR] setFrequency failed");
    while(1);
  }

  rf95.setSpreadingFactor(9);
  rf95.setSignalBandwidth(125000);
  rf95.setCodingRate4(5);
  rf95.setTxPower(20, false);

  Serial.println("[STATUS] LoRa radio OK @ 868.0 MHz");

  blinkLed(2, 200);
  Serial.println("[STATUS] Gateway ready");
}

// -------------------------
// Main Application
// -------------------------
void loop() {
  handleSerialInput(); // Check if user typed a command

  if(rf95.available()) {
    uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(buf);

    if(rf95.recv(buf, &len)) {
      blinkLed(1, 50);
      processReceivedPacket(buf, len);
    }
  }
}

// -------------------------
// Serial Command Parsing
// -------------------------
void handleSerialInput() {
  static String inputBuffer = "";

  while (Serial.available()) {
    char c = Serial.read();
    if (c == '\n' || c == '\r') {
      inputBuffer.trim();
      if (inputBuffer.startsWith("sm")) {
        if (inputBuffer.endsWith("-ToF")) {
          requestedSensorMode = 0;
          Serial.println("[COMMAND] Mode request queued: VL53L0X (ToF)");
        } else if (inputBuffer.endsWith("-US")) {
          requestedSensorMode = 1;
          Serial.println("[COMMAND] Mode request queued: HC-SR04 (Ultrasonic)");
        } else {
          Serial.println("[ERROR] Unknown sensor mode command");
        }
      } else {
        Serial.println("[ERROR] Unknown command");
      }
      inputBuffer = "";
    } else {
      inputBuffer += c;
    }
  }
}

// -------------------------
// Packet Processing
// -------------------------
void processReceivedPacket(uint8_t* buf, uint8_t len) {
  Serial.println("\n[GATEWAY] Packet received");
  printPacketHex(buf, len);

  if(len != sizeof(LoRaLightPacket)) {
    Serial.print("[ERROR] Invalid length. Expected ");
    Serial.print(sizeof(LoRaLightPacket));
    Serial.print(", got ");
    Serial.println(len);
    return;
  }

  LoRaLightPacket* packet = (LoRaLightPacket*)buf;

  uint16_t calculated_crc = calculateCRC(buf, sizeof(LoRaLightPacket)-2);
  if(packet->crc != calculated_crc) {
    Serial.println("[ERROR] CRC mismatch");
    return;
  }

  bool deviceValid = false;
  for(auto id : allowedDevices) {
    if(packet->deviceId == id) {
      deviceValid = true;
      break;
    }
  }

  if(!deviceValid) {
    Serial.print("[SECURITY] Rejected device: 0x");
    Serial.println(packet->deviceId, HEX);
    return;
  }

  // Send command if requested, else fallback to ACK
  if (requestedSensorMode != -1) {
    CommandPacket cmd;
    cmd.commandId = CMD_SET_SENSOR_MODE;
    cmd.payload[0] = requestedSensorMode;
    cmd.payload[1] = 0;
    cmd.payload[2] = 0;
    cmd.payload[3] = 0;
    cmd.crc = calculateCRC((uint8_t*)&cmd, sizeof(cmd) - 2);

    rf95.send((uint8_t*)&cmd, sizeof(cmd));
    rf95.waitPacketSent();

    Serial.print("[GATEWAY] Sent CMD_SET_SENSOR_MODE = ");
    Serial.println(requestedSensorMode == 0 ? "VL53L0X" : "HC-SR04");
    requestedSensorMode = -1;
  } else {
    uint8_t ack = ACK_SIGNAL;
    rf95.send(&ack, sizeof(ack));
    rf95.waitPacketSent();
    Serial.println("[GATEWAY] No command pending, sent ACK");
  }

  printPacketDetails(packet);
}

void printPacketDetails(LoRaLightPacket* packet) {
  Serial.println("-----------------------");
  Serial.print("Device: 0x");
  Serial.println(packet->deviceId, HEX);
  Serial.print("Counter: ");
  Serial.println(packet->packetCounter);
  Serial.print("Sensor Mode: ");
  Serial.println((packet->flags & FLAG_SENSOR_MODE) ? "HC-SR04" : "VL53L0X");
  Serial.print("Weights: ");
  Serial.print(packet->weight1);
  Serial.print("g, ");
  Serial.print(packet->weight2);
  Serial.println("g");

  Serial.println("Distances (mm):");
  for(int i=0; i<10; i++) {
    Serial.print("  ");
    Serial.print(i);
    Serial.print(": ");
    Serial.println(packet->distances[i]);
  }

  Serial.print("RSSI: ");
  Serial.print(rf95.lastRssi());
  Serial.println(" dBm");
  Serial.println("-----------------------");
}

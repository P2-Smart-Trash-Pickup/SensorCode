#include <HX711_ADC.h>
#include <Wire.h>
#include <VL53L0X.h>
#include <SPI.h>
#include <RH_RF95.h>
#include <EEPROM.h>

// -------------------------
// Hardware Configuration
// -------------------------
#define RFM95_CS 10
#define RFM95_INT 2
#define RFM95_RST 9
#define LED_PIN 13

RH_RF95 rf95(RFM95_CS, RFM95_INT);

// -------------------------
// LoRaLight Protocol
// -------------------------
struct LoRaLightPacket {
  uint8_t version = 0x01;
  uint32_t deviceId;
  uint32_t packetCounter;
  uint16_t weight1;
  uint16_t weight2;
  uint16_t distances[10];
  uint8_t flags;
  uint16_t crc;
};

// -------------------------
// Downstream Commands packet
// -------------------------
//struct CommandPacket {
//  uint8_t commandId;
//  uint8_t payload[4];
//  uint16_t crc;
//};
//
//#define CMD_SET_SENSOR_MODE 0x01

// -------------------------
// System Configuration
// -------------------------
#define MAX_RETRIES 3
#define ACK_TIMEOUT 10000
#define ACK_SIGNAL 0xAA
#define FLAG_SENSOR_MODE 0x01

const uint32_t DEVICE_ID = 0x11223344;
#define EEPROM_FCNT_ADDR 0
const unsigned long txInterval = 10000; // 10 seconds for testing

// -------------------------
// Sensor Configuration
// -------------------------
const int HX711_dout = 4;
const int HX711_sck = 5;
HX711_ADC LoadCell(HX711_dout, HX711_sck);

VL53L0X distanceSensor;
#define echoPin 6
#define trigPin 3
int sensorMode = 0;

// -------------------------
// Data Buffers
// -------------------------
const int weightHistorySize = 100;
float weightHistory[weightHistorySize];
int weightHistoryIndex = 0;
bool weightHistoryFilled = false;

#define DISTANCE_HISTORY_SIZE 10
uint16_t distanceHistory[DISTANCE_HISTORY_SIZE];
int distanceHistoryIndex = 0;

// -------------------------
// System State
// -------------------------
unsigned long lastTxTime = 0;
uint32_t currentCounter = 0;

// -------------------------
// Utility Functions
// -------------------------
void blinkLed(int times, int duration) {
  for(int i=0; i<times; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(duration);
    digitalWrite(LED_PIN, LOW);
    if(i < times-1) delay(duration);
  }
}

void printPacketHex(uint8_t* data, size_t length) {
  Serial.print("Packet Hex: ");
  for(size_t i=0; i<length; i++) {
    if(data[i] < 0x10) Serial.print("0");
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.println();
}

// -------------------------
// Initialization
// -------------------------
void initLoRa() {
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);
  delay(100);
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);

  if(!rf95.init()) {
    Serial.println("[ERROR] LoRa init failed");
    while(1);
  }

  if(!rf95.setFrequency(868.0)) {
    Serial.println("[ERROR] setFrequency failed");
    while(1);
  }

  rf95.setSpreadingFactor(9);
  rf95.setSignalBandwidth(125000);
  rf95.setCodingRate4(5);
  rf95.setTxPower(20, false);

  Serial.print("[STATUS] LoRa radio OK @ ");
  //Serial.print(rf95.getFrequency());
  Serial.println("MHz");
}

void initSensors() {
  // Weight sensor
  LoadCell.begin();
  LoadCell.start(2000, true);
  if(LoadCell.getTareTimeoutFlag()) {
    Serial.println("[ERROR] HX711 timeout");
    while(1);
  }
  LoadCell.setCalFactor(-40.10);
  
  // Distance sensor
  if(sensorMode == 0) {
    Wire.begin();
    if(!distanceSensor.init()) {
      Serial.println("[ERROR] VL53L0X init failed");
      while(1);
    }
    distanceSensor.startContinuous();
  } else {
    pinMode(trigPin, OUTPUT);
    pinMode(echoPin, INPUT);
  }
}

void setup() {
  pinMode(LED_PIN, OUTPUT);
  Serial.begin(115200);
  while(!Serial);
  
  Serial.println("[STATUS] Starting LoRaLight End Node");
  
  // Initialize systems
  EEPROM.begin();
  currentCounter = readFCnt();
  initLoRa();
  initSensors();
  
  Serial.println("[STATUS] System ready");
  blinkLed(2, 200);
}

// -------------------------
// Main Application
// -------------------------
void loop() {
  // Update sensors
  if(LoadCell.update()) {
    float weight = LoadCell.getData();
    weightHistory[weightHistoryIndex] = weight;
    weightHistoryIndex = (weightHistoryIndex + 1) % weightHistorySize;
    if(weightHistoryIndex == 0) weightHistoryFilled = true;
  }
  updateDistanceReading();

  // Handle transmissions
  if(millis() - lastTxTime >= txInterval) {
    LoRaLightPacket packet;
    preparePacket(packet);
    
    bool transmissionSuccess = attemptTransmission(packet);
    
    if(transmissionSuccess) {
      currentCounter++;
      writeFCnt(currentCounter);
      blinkLed(1, 100);
    } else {
      blinkLed(3, 200); // Error indication
    }
    
    lastTxTime = millis();
  }

  handleSerialCommands();
}

// -------------------------
// Core Functions
// -------------------------
bool attemptTransmission(LoRaLightPacket &packet) {
  for(uint8_t retry = 0; retry < MAX_RETRIES; retry++) {
    Serial.print("[TRANSMIT] Attempt ");
    Serial.print(retry+1);
    Serial.print("/");
    Serial.println(MAX_RETRIES);
    
    printPacketHex((uint8_t*)&packet, sizeof(packet));
    
    if(rf95.send((uint8_t*)&packet, sizeof(packet))) {
      rf95.waitPacketSent();
      Serial.println("[TRANSMIT] Packet sent, waiting for ACK...");
      
      if(waitForAck()) {
        Serial.println("[SUCCESS] Valid ACK received");
        return true;
      }
    }
    
    delay(1000 * (retry+1)); // Progressive backoff
  }
  
  Serial.println("[ERROR] Max retries exceeded");
  return false;
}

bool waitForAck() {
  unsigned long startTime = millis();
  while(millis() - startTime < ACK_TIMEOUT) {
    if(rf95.available()) {
      uint8_t buf[1];
      uint8_t len = sizeof(buf);
      
      if(rf95.recv(buf, &len)) {
        if(len == 1 && buf[0] == ACK_SIGNAL) {
          return true;
        }
      }
    }
    Serial.print(".");
    delay(100);
  }
  Serial.println("\n[ERROR] ACK timeout");
  return false;
}

void preparePacket(LoRaLightPacket &packet) {
  packet.deviceId = DEVICE_ID;
  packet.packetCounter = currentCounter;
  packet.weight1 = (uint16_t)constrain(getAverageWeight(), 0, 65535);
  packet.weight2 = (uint16_t)constrain(weightHistory[(weightHistoryIndex - 1 + weightHistorySize) % weightHistorySize], 0, 65535);
  
  for(int i=0; i<10; i++) {
    int idx = (distanceHistoryIndex - 1 - i + DISTANCE_HISTORY_SIZE) % DISTANCE_HISTORY_SIZE;
    packet.distances[i] = distanceHistory[idx];
  }

  packet.flags = sensorMode & FLAG_SENSOR_MODE;
  packet.crc = calculateCRC((uint8_t*)&packet, sizeof(packet)-2);
}

void updateDistanceReading() {
  if(sensorMode == 0) {
    uint16_t reading = distanceSensor.readRangeContinuousMillimeters();
    if(!distanceSensor.timeoutOccurred()) {
      distanceHistory[distanceHistoryIndex] = reading;
      distanceHistoryIndex = (distanceHistoryIndex + 1) % DISTANCE_HISTORY_SIZE;
    }
  } else {
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    long duration = pulseIn(echoPin, HIGH);
    uint16_t distance = (duration * 0.0344) / 2.0;
    distanceHistory[distanceHistoryIndex] = distance;
    distanceHistoryIndex = (distanceHistoryIndex + 1) % DISTANCE_HISTORY_SIZE;
  }
}

void handleSerialCommands() {
  if(Serial.available()) {
    char c = Serial.read();
    switch(c) {
      case 't':
        LoadCell.tareNoDelay();
        Serial.println("[ACTION] Tare initiated");
        break;
      case '0':
      case '1':
        sensorMode = c - '0';
        initSensors();
        Serial.print("[CONFIG] Sensor mode set to ");
        Serial.println(sensorMode == 0 ? "VL53L0X" : "HC-SR04");
        break;
      case 's':
        Serial.println("[STATUS] Force sending packet");
        lastTxTime = 0; // Force immediate transmission
        break;
    }
  }
}

// -------------------------
// EEPROM Functions
// -------------------------
uint32_t readFCnt() {
  uint32_t val;
  EEPROM.get(EEPROM_FCNT_ADDR, val);
  if(val == 0xFFFFFFFF) {
    val = 0;
    EEPROM.put(EEPROM_FCNT_ADDR, val);
  }
  return val;
}

void writeFCnt(uint32_t val) {
  EEPROM.put(EEPROM_FCNT_ADDR, val);
}

// -------------------------
// CRC Calculation
// -------------------------
uint16_t calculateCRC(const uint8_t *data, size_t length) {
  uint16_t crc = 0xFFFF;
  for(size_t i=0; i<length; ++i) {
    crc ^= data[i];
    for(uint8_t j=0; j<8; ++j) {
      if(crc & 1) crc = (crc >> 1) ^ 0xA001;
      else crc >>= 1;
    }
  }
  return crc;
}

float getAverageWeight() {
  float sum = 0.0;
  int count = weightHistoryFilled ? weightHistorySize : weightHistoryIndex;
  for(int i=0; i<count; i++) sum += weightHistory[i];
  return sum / count;
}